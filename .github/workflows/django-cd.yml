name: Django CI/CD

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_PASSWORD: postgres
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        
    - name: Install dependencies
      run: |
        python3 -m pip install --upgrade pip
        pip3 install -r backend/requirements.txt
        
    - name: Run tests
      working-directory: ./backend
      env:
        DATABASE_URL: postgres://postgres:postgres@localhost:5432/test_db
        SECRET_KEY: ${{ secrets.DJANGO_SECRET_KEY }}
      run: |
        python3 manage.py test

  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      
    - name: Install SSH key
      uses: webfactory/ssh-agent@v0.7.0
      with:
        ssh-private-key: ${{ secrets.EC2_SSH_KEY }}
        
    - name: Add EC2 to known hosts
      run: |
        mkdir -p ~/.ssh
        ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts
        
    - name: Deploy to EC2
      env:
        EC2_USER: ${{ secrets.EC2_USERNAME || 'ubuntu' }}
        EC2_HOST: ${{ secrets.EC2_HOST }}
      run: |
        # Create deployment directory
        ssh -o StrictHostKeyChecking=no $EC2_USER@$EC2_HOST "mkdir -p ~/app"
        
        # Copy files
        rsync -avz -e "ssh -o StrictHostKeyChecking=no" \
          --exclude '.git' \
          --exclude '.github' \
          --exclude '.gitignore' \
          --exclude 'venv' \
          --exclude '__pycache__' \
          --exclude '*.pyc' \
          --exclude '*.pyo' \
          --exclude '*.pyd' \
          . $EC2_USER@$EC2_HOST:~/app/
        
        # Run deployment script
        ssh $EC2_USER@$EC2_HOST "cd ~/app/backend && \
          python3 -m venv venv && \
          source venv/bin/activate && \
          pip3 install -r requirements.txt && \
          python3 manage.py migrate && \
          python3 manage.py collectstatic --noinput"
        
        # Restart Gunicorn
        ssh $EC2_USER@$EC2_HOST "sudo systemctl restart gunicorn"