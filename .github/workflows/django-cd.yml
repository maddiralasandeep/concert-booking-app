name: Django CI/CD

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  PYTHON_VERSION: '3.12.3'
  POSTGRES_VERSION: '15'
  DATABASE_URL: postgres://postgres:postgres@localhost:5432/test_db

jobs:
  test:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.12.3
      uses: actions/setup-python@v5
      with:
        python-version: '3.12.3'
        cache: 'pip'
        
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libpq-dev python3-dev
        
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r backend/requirements.txt
        pip install pytest pytest-django
        
    - name: Run tests
      working-directory: ./backend
      env:
        DATABASE_URL: ${{ env.DATABASE_URL }}
        SECRET_KEY: ${{ secrets.DJANGO_SECRET_KEY || 'test-secret-key' }}
        DEBUG: 'False'
        PYTHONPATH: ${{ github.workspace }}/backend
        DJANGO_SETTINGS_MODULE: concertbooking.settings
      run: |
        # Create static files directory
        mkdir -p staticfiles
        
        # Install package in development mode
        python -m pip install -e .
        
        # Install test dependencies
        python -m pip install pytest-django pytest-cov
        
        # Check Django setup
        python manage.py check
        
        # Collect static files for testing
        python manage.py collectstatic --noinput || true
        
        # Run migrations
        python manage.py migrate --noinput
        
        # List all test files for debugging
        echo "Test files found:"
        find . -name "test_*.py" -o -name "*_test.py" -o -name "tests.py" | sort
        
        # Run tests with detailed output
        python -m pytest -v --ds=concertbooking.settings --cov=concerts --cov-report=xml
        
        # Run Django's test suite with more verbosity
        python manage.py test --noinput -v 2

  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.12.3
      uses: actions/setup-python@v5
      with:
        python-version: '3.12.3'
        
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libpq-dev python3-dev
        
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r backend/requirements.txt
        
    - name: Collect static files
      working-directory: ./backend
      env:
        SECRET_KEY: ${{ secrets.DJANGO_SECRET_KEY }}
        DEBUG: 'False'
      run: |
        python manage.py collectstatic --noinput
        
    - name: Run migrations
      working-directory: ./backend
      env:
        DATABASE_URL: ${{ secrets.PROD_DATABASE_URL }}
        SECRET_KEY: ${{ secrets.DJANGO_SECRET_KEY }}
        DEBUG: 'False'
      run: |
        python manage.py migrate --noinput
        
    - name: Deploy to EC2
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ubuntu
        key: ${{ secrets.EC2_SSH_KEY }}
        script: |
          cd /home/ubuntu/concert-booking-app
          git pull origin main
          python -m pip install -r backend/requirements.txt
          python manage.py collectstatic --noinput
          python manage.py migrate --noinput
          sudo systemctl restart gunicorn
          sudo systemctl restart nginx
    
    - name: Verify Deployment
      run: |
        echo "Deployment to EC2 instance completed successfully"
        
        # Copy files
        rsync -avz -e "ssh -o StrictHostKeyChecking=no" \
          --exclude '.git' \
          --exclude '.github' \
          --exclude '.gitignore' \
          --exclude 'venv' \
          --exclude '__pycache__' \
          --exclude '*.pyc' \
          --exclude '*.pyo' \
          --exclude '*.pyd' \
          . $EC2_USER@$EC2_HOST:~/app/
        
        # Run deployment script
        ssh $EC2_USER@$EC2_HOST "cd ~/app/backend && \
          python3 -m venv venv && \
          source venv/bin/activate && \
          pip3 install -r requirements.txt && \
          python3 manage.py migrate && \
          python3 manage.py collectstatic --noinput"
        
        # Restart Gunicorn
        ssh $EC2_USER@$EC2_HOST "sudo systemctl restart gunicorn"