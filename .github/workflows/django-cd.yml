name: Django CI/CD

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      skip_tests:
        description: 'Skip tests and deploy directly'
        required: false
        type: boolean
        default: false

env:
  PYTHON_VERSION: '3.12.3'
  POSTGRES_VERSION: '15'
  DATABASE_URL: postgres://postgres:postgres@localhost:5432/test_db

jobs:
  test:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python 3.12.3
        uses: actions/setup-python@v5
        with:
          python-version: '3.12.3'

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libpq-dev python3-dev

      - name: Install Python dependencies
        working-directory: ./backend
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Wait for PostgreSQL
        run: |
          for i in {1..10}; do
            if pg_isready -h localhost -p 5432 -U postgres -d test_db; then
              echo "PostgreSQL is ready"
              break
            fi
            echo "Waiting for PostgreSQL..."
            sleep 2
          done
          
      - name: Run database migrations
        working-directory: ./backend
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
          SECRET_KEY: test-secret-key
          DEBUG: 'False'
        run: |
          python manage.py migrate --noinput
          
      # - name: Run tests
      #   working-directory: ./backend
      #   env:
      #     DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
      #     SECRET_KEY: test-secret-key
      #     DEBUG: 'False'
      #     PYTHONPATH: ${{ github.workspace }}/backend
      #     DJANGO_SETTINGS_MODULE: concertbooking.settings
      #   run: |
      #     python manage.py test --noinput -v 3

      # - name: Run tests
      #   working-directory: ./backend
      #   env:
      #     DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
      #     SECRET_KEY: test-secret-key
      #     DEBUG: 'False'
      #     PYTHONPATH: ${{ github.workspace }}/backend
      #     DJANGO_SETTINGS_MODULE: concertbooking.settings
      #   run: |
      #     # Create static files directory
      #     mkdir -p staticfiles

      #     # Install package in development mode
      #     python -m pip install -e .
          
      #     # Run migrations
      #     python manage.py migrate --noinput
          
      #     # Run tests
      #     python manage.py test --noinput -v 3

      #     # Check Django setup
      #     python manage.py check

      #     # Collect static files for testing
      #     python manage.py collectstatic --noinput || true

      #     # Wait for PostgreSQL to be ready
      #     echo "Waiting for PostgreSQL to be ready..."
      #     for i in {1..10}; do
      #       if python -c "import psycopg2; \
      #         psycopg2.connect(\
      #           dbname='test_db', \
      #           user='postgres', \
      #           password='postgres', \
      #           host='localhost'\
      #         )" 2>/dev/null; then
      #         echo "PostgreSQL is ready"
      #         break
      #       fi
      #       echo "Waiting for PostgreSQL..."
      #       sleep 2
      #     done

      #     # Run migrations
      #     python manage.py migrate --noinput

      #     # Run tests using Django's test runner with increased verbosity
      #     python manage.py test --noinput -v 3

      #     # Run pytest with coverage
      #     python -m pytest -v --ds=concertbooking.settings --cov=concerts --cov-report=xml

  deploy:
    needs: [test]
    if: github.ref == 'refs/heads/main' || github.event.inputs.skip_tests == 'true'
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python 3.12.3
        uses: actions/setup-python@v5
        with:
          python-version: '3.12.3'

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libpq-dev python3-dev

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r backend/requirements.txt

      - name: Collect static files
        working-directory: ./backend
        env:
          SECRET_KEY: ${{ secrets.DJANGO_SECRET_KEY }}
          DEBUG: 'False'
        run: |
          python manage.py collectstatic --noinput

      - name: Run migrations
        working-directory: ./backend
        env:
          DATABASE_URL: ${{ secrets.PROD_DATABASE_URL }}
          SECRET_KEY: ${{ secrets.DJANGO_SECRET_KEY }}
          DEBUG: 'False'
        run: |
          python manage.py migrate --noinput

      - name: Deploy to EC2
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ubuntu
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            cd /home/ubuntu/concert-booking-app
            git pull origin main
            python -m pip install -r backend/requirements.txt
            python manage.py collectstatic --noinput
            python manage.py migrate --noinput
            sudo systemctl restart gunicorn
            sudo systemctl restart nginx

      - name: Verify Deployment
        run: |
          echo "Deployment to EC2 instance completed successfully"

          # Set EC2_USER environment variable if not set
          EC2_USER=${EC2_USER:-ubuntu}

          # Copy files
          rsync -avz -e "ssh -o StrictHostKeyChecking=no" \
            --exclude '.git' \
            --exclude '.github' \
            --exclude '.gitignore' \
            --exclude 'venv' \
            --exclude '__pycache__' \
            --exclude '*.pyc' \
            --exclude '*.pyo' \
            --exclude '*.pyd' \
            . $EC2_USER@${{ secrets.EC2_HOST }}:~/app/

          # Run deployment script
          ssh $EC2_USER@${{ secrets.EC2_HOST }} "cd ~/app/backend && \
            python3 -m venv venv && \
            source venv/bin/activate && \
            pip3 install -r requirements.txt && \
            python3 manage.py migrate && \
            python3 manage.py collectstatic --noinput"

          # Restart Gunicorn
          ssh $EC2_USER@${{ secrets.EC2_HOST }} "sudo systemctl restart gunicorn"